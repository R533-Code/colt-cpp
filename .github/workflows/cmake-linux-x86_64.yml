name: "Linux: Clang, GCC on x86_64 "

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.cpp'
      - '**/*.h'
      - '**/CMakeLists.txt'
      - '**/*.yml'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-24.04]
        build_type: [Debug]
        c_compiler: [gcc-14, clang]
        include:
          - os: ubuntu-24.04
            c_compiler: gcc-14
            cpp_compiler: g++-14
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
      with:
        egress-policy: audit
    # clone --recursive
    - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      with:
        submodules: recursive

    # Used to simulate SIMD instructions
    - name: Setup SDE
      uses: petarpetrovt/setup-sde@f0fa5971dc275704531e94264dd23250c442aa41 # v2.4
      with:
        environmentVariableName: SDE_PATH
        sdeVersion: 9.33.0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j$(nproc)

      # Run Catch2 unit tests
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

      # Test functions that use `choose_simd_function`
    - name: Test SSE42
      run: $SDE_PATH/sde -snb -- '${{ steps.strings.outputs.build-output-dir }}/coltcpp_tests'

    - name: Test AVX2
      run: $SDE_PATH/sde -bdw -- '${{ steps.strings.outputs.build-output-dir }}/coltcpp_tests'
    
    - name: Test AVX512
      run: $SDE_PATH/sde -skx -- '${{ steps.strings.outputs.build-output-dir }}/coltcpp_tests'
      

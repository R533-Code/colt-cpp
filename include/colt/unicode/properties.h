// !! Generated by unicodedata_to_cxx.py !!
#ifndef __COLT_UNICODE_PROPERTIES__
#define __COLT_UNICODE_PROPERTIES__

#include <cstdint>

namespace clt::uni {
enum class ASCII_Hex_Digit : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using AHex = ASCII_Hex_Digit;

enum class Age : uint8_t {
  _1_1 = 0,
  V1_1 = _1_1,
  _2_0 = 1,
  V2_0 = _2_0,
  _2_1 = 2,
  V2_1 = _2_1,
  _3_0 = 3,
  V3_0 = _3_0,
  _3_1 = 4,
  V3_1 = _3_1,
  _3_2 = 5,
  V3_2 = _3_2,
  _4_0 = 6,
  V4_0 = _4_0,
  _4_1 = 7,
  V4_1 = _4_1,
  _5_0 = 8,
  V5_0 = _5_0,
  _5_1 = 9,
  V5_1 = _5_1,
  _5_2 = 10,
  V5_2 = _5_2,
  _6_0 = 11,
  V6_0 = _6_0,
  _6_1 = 12,
  V6_1 = _6_1,
  _6_2 = 13,
  V6_2 = _6_2,
  _6_3 = 14,
  V6_3 = _6_3,
  _7_0 = 15,
  V7_0 = _7_0,
  _8_0 = 16,
  V8_0 = _8_0,
  _9_0 = 17,
  V9_0 = _9_0,
  _10_0 = 18,
  V10_0 = _10_0,
  _11_0 = 19,
  V11_0 = _11_0,
  _12_0 = 20,
  V12_0 = _12_0,
  _12_1 = 21,
  V12_1 = _12_1,
  _13_0 = 22,
  V13_0 = _13_0,
  _14_0 = 23,
  V14_0 = _14_0,
  _15_0 = 24,
  V15_0 = _15_0,
  _15_1 = 25,
  V15_1 = _15_1,
  _16_0 = 26,
  V16_0 = _16_0,
  NA = 27,
  Unassigned = NA,
};
using age = Age;

enum class Alphabetic : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Alpha = Alphabetic;

enum class Bidi_Class : uint8_t {
  AL = 0,
  Arabic_Letter = AL,
  AN = 1,
  Arabic_Number = AN,
  B = 2,
  Paragraph_Separator = B,
  BN = 3,
  Boundary_Neutral = BN,
  CS = 4,
  Common_Separator = CS,
  EN = 5,
  European_Number = EN,
  ES = 6,
  European_Separator = ES,
  ET = 7,
  European_Terminator = ET,
  FSI = 8,
  First_Strong_Isolate = FSI,
  L = 9,
  Left_To_Right = L,
  LRE = 10,
  Left_To_Right_Embedding = LRE,
  LRI = 11,
  Left_To_Right_Isolate = LRI,
  LRO = 12,
  Left_To_Right_Override = LRO,
  NSM = 13,
  Nonspacing_Mark = NSM,
  ON = 14,
  Other_Neutral = ON,
  PDF = 15,
  Pop_Directional_Format = PDF,
  PDI = 16,
  Pop_Directional_Isolate = PDI,
  R = 17,
  Right_To_Left = R,
  RLE = 18,
  Right_To_Left_Embedding = RLE,
  RLI = 19,
  Right_To_Left_Isolate = RLI,
  RLO = 20,
  Right_To_Left_Override = RLO,
  S = 21,
  Segment_Separator = S,
  WS = 22,
  White_Space = WS,
};
using bc = Bidi_Class;

enum class Bidi_Control : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Bidi_C = Bidi_Control;

enum class Bidi_Mirrored : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Bidi_M = Bidi_Mirrored;

enum class Bidi_Paired_Bracket_Type : uint8_t {
  c = 0,
  Close = c,
  n = 1,
  None = n,
  o = 2,
  Open = o,
};
using bpt = Bidi_Paired_Bracket_Type;

enum class Block : uint16_t {
  Adlam = 0,
  Aegean_Numbers = 1,
  Ahom = 2,
  Alchemical = 3,
  Alchemical_Symbols = Alchemical,
  Alphabetic_PF = 4,
  Alphabetic_Presentation_Forms = Alphabetic_PF,
  Anatolian_Hieroglyphs = 5,
  Ancient_Greek_Music = 6,
  Ancient_Greek_Musical_Notation = Ancient_Greek_Music,
  Ancient_Greek_Numbers = 7,
  Ancient_Symbols = 8,
  Arabic = 9,
  Arabic_Ext_A = 10,
  Arabic_Extended_A = Arabic_Ext_A,
  Arabic_Ext_B = 11,
  Arabic_Extended_B = Arabic_Ext_B,
  Arabic_Ext_C = 12,
  Arabic_Extended_C = Arabic_Ext_C,
  Arabic_Math = 13,
  Arabic_Mathematical_Alphabetic_Symbols = Arabic_Math,
  Arabic_PF_A = 14,
  Arabic_Presentation_Forms_A = Arabic_PF_A,
  Arabic_PF_B = 15,
  Arabic_Presentation_Forms_B = Arabic_PF_B,
  Arabic_Sup = 16,
  Arabic_Supplement = Arabic_Sup,
  Armenian = 17,
  Arrows = 18,
  ASCII = 19,
  Basic_Latin = ASCII,
  Avestan = 20,
  Balinese = 21,
  Bamum = 22,
  Bamum_Sup = 23,
  Bamum_Supplement = Bamum_Sup,
  Bassa_Vah = 24,
  Batak = 25,
  Bengali = 26,
  Bhaiksuki = 27,
  Block_Elements = 28,
  Bopomofo = 29,
  Bopomofo_Ext = 30,
  Bopomofo_Extended = Bopomofo_Ext,
  Box_Drawing = 31,
  Brahmi = 32,
  Braille = 33,
  Braille_Patterns = Braille,
  Buginese = 34,
  Buhid = 35,
  Byzantine_Music = 36,
  Byzantine_Musical_Symbols = Byzantine_Music,
  Carian = 37,
  Caucasian_Albanian = 38,
  Chakma = 39,
  Cham = 40,
  Cherokee = 41,
  Cherokee_Sup = 42,
  Cherokee_Supplement = Cherokee_Sup,
  Chess_Symbols = 43,
  Chorasmian = 44,
  CJK = 45,
  CJK_Unified_Ideographs = CJK,
  CJK_Compat = 46,
  CJK_Compatibility = CJK_Compat,
  CJK_Compat_Forms = 47,
  CJK_Compatibility_Forms = CJK_Compat_Forms,
  CJK_Compat_Ideographs = 48,
  CJK_Compatibility_Ideographs = CJK_Compat_Ideographs,
  CJK_Compat_Ideographs_Sup = 49,
  CJK_Compatibility_Ideographs_Supplement = CJK_Compat_Ideographs_Sup,
  CJK_Ext_A = 50,
  CJK_Unified_Ideographs_Extension_A = CJK_Ext_A,
  CJK_Ext_B = 51,
  CJK_Unified_Ideographs_Extension_B = CJK_Ext_B,
  CJK_Ext_C = 52,
  CJK_Unified_Ideographs_Extension_C = CJK_Ext_C,
  CJK_Ext_D = 53,
  CJK_Unified_Ideographs_Extension_D = CJK_Ext_D,
  CJK_Ext_E = 54,
  CJK_Unified_Ideographs_Extension_E = CJK_Ext_E,
  CJK_Ext_F = 55,
  CJK_Unified_Ideographs_Extension_F = CJK_Ext_F,
  CJK_Ext_G = 56,
  CJK_Unified_Ideographs_Extension_G = CJK_Ext_G,
  CJK_Ext_H = 57,
  CJK_Unified_Ideographs_Extension_H = CJK_Ext_H,
  CJK_Ext_I = 58,
  CJK_Unified_Ideographs_Extension_I = CJK_Ext_I,
  CJK_Radicals_Sup = 59,
  CJK_Radicals_Supplement = CJK_Radicals_Sup,
  CJK_Strokes = 60,
  CJK_Symbols = 61,
  CJK_Symbols_And_Punctuation = CJK_Symbols,
  Compat_Jamo = 62,
  Hangul_Compatibility_Jamo = Compat_Jamo,
  Control_Pictures = 63,
  Coptic = 64,
  Coptic_Epact_Numbers = 65,
  Counting_Rod = 66,
  Counting_Rod_Numerals = Counting_Rod,
  Cuneiform = 67,
  Cuneiform_Numbers = 68,
  Cuneiform_Numbers_And_Punctuation = Cuneiform_Numbers,
  Currency_Symbols = 69,
  Cypriot_Syllabary = 70,
  Cypro_Minoan = 71,
  Cyrillic = 72,
  Cyrillic_Ext_A = 73,
  Cyrillic_Extended_A = Cyrillic_Ext_A,
  Cyrillic_Ext_B = 74,
  Cyrillic_Extended_B = Cyrillic_Ext_B,
  Cyrillic_Ext_C = 75,
  Cyrillic_Extended_C = Cyrillic_Ext_C,
  Cyrillic_Ext_D = 76,
  Cyrillic_Extended_D = Cyrillic_Ext_D,
  Cyrillic_Sup = 77,
  Cyrillic_Supplement = Cyrillic_Sup,
  Cyrillic_Supplementary = Cyrillic_Sup,
  Deseret = 78,
  Devanagari = 79,
  Devanagari_Ext = 80,
  Devanagari_Extended = Devanagari_Ext,
  Devanagari_Ext_A = 81,
  Devanagari_Extended_A = Devanagari_Ext_A,
  Diacriticals = 82,
  Combining_Diacritical_Marks = Diacriticals,
  Diacriticals_Ext = 83,
  Combining_Diacritical_Marks_Extended = Diacriticals_Ext,
  Diacriticals_For_Symbols = 84,
  Combining_Diacritical_Marks_For_Symbols = Diacriticals_For_Symbols,
  Combining_Marks_For_Symbols = Diacriticals_For_Symbols,
  Diacriticals_Sup = 85,
  Combining_Diacritical_Marks_Supplement = Diacriticals_Sup,
  Dingbats = 86,
  Dives_Akuru = 87,
  Dogra = 88,
  Domino = 89,
  Domino_Tiles = Domino,
  Duployan = 90,
  Early_Dynastic_Cuneiform = 91,
  Egyptian_Hieroglyph_Format_Controls = 92,
  Egyptian_Hieroglyphs = 93,
  Egyptian_Hieroglyphs_Ext_A = 94,
  Egyptian_Hieroglyphs_Extended_A = Egyptian_Hieroglyphs_Ext_A,
  Elbasan = 95,
  Elymaic = 96,
  Emoticons = 97,
  Enclosed_Alphanum = 98,
  Enclosed_Alphanumerics = Enclosed_Alphanum,
  Enclosed_Alphanum_Sup = 99,
  Enclosed_Alphanumeric_Supplement = Enclosed_Alphanum_Sup,
  Enclosed_CJK = 100,
  Enclosed_CJK_Letters_And_Months = Enclosed_CJK,
  Enclosed_Ideographic_Sup = 101,
  Enclosed_Ideographic_Supplement = Enclosed_Ideographic_Sup,
  Ethiopic = 102,
  Ethiopic_Ext = 103,
  Ethiopic_Extended = Ethiopic_Ext,
  Ethiopic_Ext_A = 104,
  Ethiopic_Extended_A = Ethiopic_Ext_A,
  Ethiopic_Ext_B = 105,
  Ethiopic_Extended_B = Ethiopic_Ext_B,
  Ethiopic_Sup = 106,
  Ethiopic_Supplement = Ethiopic_Sup,
  Garay = 107,
  Geometric_Shapes = 108,
  Geometric_Shapes_Ext = 109,
  Geometric_Shapes_Extended = Geometric_Shapes_Ext,
  Georgian = 110,
  Georgian_Ext = 111,
  Georgian_Extended = Georgian_Ext,
  Georgian_Sup = 112,
  Georgian_Supplement = Georgian_Sup,
  Glagolitic = 113,
  Glagolitic_Sup = 114,
  Glagolitic_Supplement = Glagolitic_Sup,
  Gothic = 115,
  Grantha = 116,
  Greek = 117,
  Greek_And_Coptic = Greek,
  Greek_Ext = 118,
  Greek_Extended = Greek_Ext,
  Gujarati = 119,
  Gunjala_Gondi = 120,
  Gurmukhi = 121,
  Gurung_Khema = 122,
  Half_And_Full_Forms = 123,
  Halfwidth_And_Fullwidth_Forms = Half_And_Full_Forms,
  Half_Marks = 124,
  Combining_Half_Marks = Half_Marks,
  Hangul = 125,
  Hangul_Syllables = Hangul,
  Hanifi_Rohingya = 126,
  Hanunoo = 127,
  Hatran = 128,
  Hebrew = 129,
  High_PU_Surrogates = 130,
  High_Private_Use_Surrogates = High_PU_Surrogates,
  High_Surrogates = 131,
  Hiragana = 132,
  IDC = 133,
  Ideographic_Description_Characters = IDC,
  Ideographic_Symbols = 134,
  Ideographic_Symbols_And_Punctuation = Ideographic_Symbols,
  Imperial_Aramaic = 135,
  Indic_Number_Forms = 136,
  Common_Indic_Number_Forms = Indic_Number_Forms,
  Indic_Siyaq_Numbers = 137,
  Inscriptional_Pahlavi = 138,
  Inscriptional_Parthian = 139,
  IPA_Ext = 140,
  IPA_Extensions = IPA_Ext,
  Jamo = 141,
  Hangul_Jamo = Jamo,
  Jamo_Ext_A = 142,
  Hangul_Jamo_Extended_A = Jamo_Ext_A,
  Jamo_Ext_B = 143,
  Hangul_Jamo_Extended_B = Jamo_Ext_B,
  Javanese = 144,
  Kaithi = 145,
  Kaktovik_Numerals = 146,
  Kana_Ext_A = 147,
  Kana_Extended_A = Kana_Ext_A,
  Kana_Ext_B = 148,
  Kana_Extended_B = Kana_Ext_B,
  Kana_Sup = 149,
  Kana_Supplement = Kana_Sup,
  Kanbun = 150,
  Kangxi = 151,
  Kangxi_Radicals = Kangxi,
  Kannada = 152,
  Katakana = 153,
  Katakana_Ext = 154,
  Katakana_Phonetic_Extensions = Katakana_Ext,
  Kawi = 155,
  Kayah_Li = 156,
  Kharoshthi = 157,
  Khitan_Small_Script = 158,
  Khmer = 159,
  Khmer_Symbols = 160,
  Khojki = 161,
  Khudawadi = 162,
  Kirat_Rai = 163,
  Lao = 164,
  Latin_1_Sup = 165,
  Latin_1_Supplement = Latin_1_Sup,
  Latin_1 = Latin_1_Sup,
  Latin_Ext_A = 166,
  Latin_Extended_A = Latin_Ext_A,
  Latin_Ext_Additional = 167,
  Latin_Extended_Additional = Latin_Ext_Additional,
  Latin_Ext_B = 168,
  Latin_Extended_B = Latin_Ext_B,
  Latin_Ext_C = 169,
  Latin_Extended_C = Latin_Ext_C,
  Latin_Ext_D = 170,
  Latin_Extended_D = Latin_Ext_D,
  Latin_Ext_E = 171,
  Latin_Extended_E = Latin_Ext_E,
  Latin_Ext_F = 172,
  Latin_Extended_F = Latin_Ext_F,
  Latin_Ext_G = 173,
  Latin_Extended_G = Latin_Ext_G,
  Lepcha = 174,
  Letterlike_Symbols = 175,
  Limbu = 176,
  Linear_A = 177,
  Linear_B_Ideograms = 178,
  Linear_B_Syllabary = 179,
  Lisu = 180,
  Lisu_Sup = 181,
  Lisu_Supplement = Lisu_Sup,
  Low_Surrogates = 182,
  Lycian = 183,
  Lydian = 184,
  Mahajani = 185,
  Mahjong = 186,
  Mahjong_Tiles = Mahjong,
  Makasar = 187,
  Malayalam = 188,
  Mandaic = 189,
  Manichaean = 190,
  Marchen = 191,
  Masaram_Gondi = 192,
  Math_Alphanum = 193,
  Mathematical_Alphanumeric_Symbols = Math_Alphanum,
  Math_Operators = 194,
  Mathematical_Operators = Math_Operators,
  Mayan_Numerals = 195,
  Medefaidrin = 196,
  Meetei_Mayek = 197,
  Meetei_Mayek_Ext = 198,
  Meetei_Mayek_Extensions = Meetei_Mayek_Ext,
  Mende_Kikakui = 199,
  Meroitic_Cursive = 200,
  Meroitic_Hieroglyphs = 201,
  Miao = 202,
  Misc_Arrows = 203,
  Miscellaneous_Symbols_And_Arrows = Misc_Arrows,
  Misc_Math_Symbols_A = 204,
  Miscellaneous_Mathematical_Symbols_A = Misc_Math_Symbols_A,
  Misc_Math_Symbols_B = 205,
  Miscellaneous_Mathematical_Symbols_B = Misc_Math_Symbols_B,
  Misc_Pictographs = 206,
  Miscellaneous_Symbols_And_Pictographs = Misc_Pictographs,
  Misc_Symbols = 207,
  Miscellaneous_Symbols = Misc_Symbols,
  Misc_Technical = 208,
  Miscellaneous_Technical = Misc_Technical,
  Modi = 209,
  Modifier_Letters = 210,
  Spacing_Modifier_Letters = Modifier_Letters,
  Modifier_Tone_Letters = 211,
  Mongolian = 212,
  Mongolian_Sup = 213,
  Mongolian_Supplement = Mongolian_Sup,
  Mro = 214,
  Multani = 215,
  Music = 216,
  Musical_Symbols = Music,
  Myanmar = 217,
  Myanmar_Ext_A = 218,
  Myanmar_Extended_A = Myanmar_Ext_A,
  Myanmar_Ext_B = 219,
  Myanmar_Extended_B = Myanmar_Ext_B,
  Myanmar_Ext_C = 220,
  Myanmar_Extended_C = Myanmar_Ext_C,
  Nabataean = 221,
  Nag_Mundari = 222,
  Nandinagari = 223,
  NB = 224,
  No_Block = NB,
  New_Tai_Lue = 225,
  Newa = 226,
  NKo = 227,
  Number_Forms = 228,
  Nushu = 229,
  Nyiakeng_Puachue_Hmong = 230,
  OCR = 231,
  Optical_Character_Recognition = OCR,
  Ogham = 232,
  Ol_Chiki = 233,
  Ol_Onal = 234,
  Old_Hungarian = 235,
  Old_Italic = 236,
  Old_North_Arabian = 237,
  Old_Permic = 238,
  Old_Persian = 239,
  Old_Sogdian = 240,
  Old_South_Arabian = 241,
  Old_Turkic = 242,
  Old_Uyghur = 243,
  Oriya = 244,
  Ornamental_Dingbats = 245,
  Osage = 246,
  Osmanya = 247,
  Ottoman_Siyaq_Numbers = 248,
  Pahawh_Hmong = 249,
  Palmyrene = 250,
  Pau_Cin_Hau = 251,
  Phags_Pa = 252,
  Phaistos = 253,
  Phaistos_Disc = Phaistos,
  Phoenician = 254,
  Phonetic_Ext = 255,
  Phonetic_Extensions = Phonetic_Ext,
  Phonetic_Ext_Sup = 256,
  Phonetic_Extensions_Supplement = Phonetic_Ext_Sup,
  Playing_Cards = 257,
  Psalter_Pahlavi = 258,
  PUA = 259,
  Private_Use_Area = PUA,
  Private_Use = PUA,
  Punctuation = 260,
  General_Punctuation = Punctuation,
  Rejang = 261,
  Rumi = 262,
  Rumi_Numeral_Symbols = Rumi,
  Runic = 263,
  Samaritan = 264,
  Saurashtra = 265,
  Sharada = 266,
  Shavian = 267,
  Shorthand_Format_Controls = 268,
  Siddham = 269,
  Sinhala = 270,
  Sinhala_Archaic_Numbers = 271,
  Small_Forms = 272,
  Small_Form_Variants = Small_Forms,
  Small_Kana_Ext = 273,
  Small_Kana_Extension = Small_Kana_Ext,
  Sogdian = 274,
  Sora_Sompeng = 275,
  Soyombo = 276,
  Specials = 277,
  Sundanese = 278,
  Sundanese_Sup = 279,
  Sundanese_Supplement = Sundanese_Sup,
  Sunuwar = 280,
  Sup_Arrows_A = 281,
  Supplemental_Arrows_A = Sup_Arrows_A,
  Sup_Arrows_B = 282,
  Supplemental_Arrows_B = Sup_Arrows_B,
  Sup_Arrows_C = 283,
  Supplemental_Arrows_C = Sup_Arrows_C,
  Sup_Math_Operators = 284,
  Supplemental_Mathematical_Operators = Sup_Math_Operators,
  Sup_PUA_A = 285,
  Supplementary_Private_Use_Area_A = Sup_PUA_A,
  Sup_PUA_B = 286,
  Supplementary_Private_Use_Area_B = Sup_PUA_B,
  Sup_Punctuation = 287,
  Supplemental_Punctuation = Sup_Punctuation,
  Sup_Symbols_And_Pictographs = 288,
  Supplemental_Symbols_And_Pictographs = Sup_Symbols_And_Pictographs,
  Super_And_Sub = 289,
  Superscripts_And_Subscripts = Super_And_Sub,
  Sutton_SignWriting = 290,
  Syloti_Nagri = 291,
  Symbols_And_Pictographs_Ext_A = 292,
  Symbols_And_Pictographs_Extended_A = Symbols_And_Pictographs_Ext_A,
  Symbols_For_Legacy_Computing = 293,
  Symbols_For_Legacy_Computing_Sup = 294,
  Symbols_For_Legacy_Computing_Supplement = Symbols_For_Legacy_Computing_Sup,
  Syriac = 295,
  Syriac_Sup = 296,
  Syriac_Supplement = Syriac_Sup,
  Tagalog = 297,
  Tagbanwa = 298,
  Tags = 299,
  Tai_Le = 300,
  Tai_Tham = 301,
  Tai_Viet = 302,
  Tai_Xuan_Jing = 303,
  Tai_Xuan_Jing_Symbols = Tai_Xuan_Jing,
  Takri = 304,
  Tamil = 305,
  Tamil_Sup = 306,
  Tamil_Supplement = Tamil_Sup,
  Tangsa = 307,
  Tangut = 308,
  Tangut_Components = 309,
  Tangut_Sup = 310,
  Tangut_Supplement = Tangut_Sup,
  Telugu = 311,
  Thaana = 312,
  Thai = 313,
  Tibetan = 314,
  Tifinagh = 315,
  Tirhuta = 316,
  Todhri = 317,
  Toto = 318,
  Transport_And_Map = 319,
  Transport_And_Map_Symbols = Transport_And_Map,
  Tulu_Tigalari = 320,
  UCAS = 321,
  Unified_Canadian_Aboriginal_Syllabics = UCAS,
  Canadian_Syllabics = UCAS,
  UCAS_Ext = 322,
  Unified_Canadian_Aboriginal_Syllabics_Extended = UCAS_Ext,
  UCAS_Ext_A = 323,
  Unified_Canadian_Aboriginal_Syllabics_Extended_A = UCAS_Ext_A,
  Ugaritic = 324,
  Vai = 325,
  Vedic_Ext = 326,
  Vedic_Extensions = Vedic_Ext,
  Vertical_Forms = 327,
  Vithkuqi = 328,
  VS = 329,
  Variation_Selectors = VS,
  VS_Sup = 330,
  Variation_Selectors_Supplement = VS_Sup,
  Wancho = 331,
  Warang_Citi = 332,
  Yezidi = 333,
  Yi_Radicals = 334,
  Yi_Syllables = 335,
  Yijing = 336,
  Yijing_Hexagram_Symbols = Yijing,
  Zanabazar_Square = 337,
  Znamenny_Music = 338,
  Znamenny_Musical_Notation = Znamenny_Music,
};
using blk = Block;

enum class Canonical_Combining_Class : uint8_t {
  _0 = 0,
  NR = _0,
  Not_Reordered = _0,
  _1 = 1,
  OV = _1,
  Overlay = _1,
  _6 = 2,
  HANR = _6,
  Han_Reading = _6,
  _7 = 3,
  NK = _7,
  Nukta = _7,
  _8 = 4,
  KV = _8,
  Kana_Voicing = _8,
  _9 = 5,
  VR = _9,
  Virama = _9,
  _10 = 6,
  CCC10 = _10,
  _11 = 7,
  CCC11 = _11,
  _12 = 8,
  CCC12 = _12,
  _13 = 9,
  CCC13 = _13,
  _14 = 10,
  CCC14 = _14,
  _15 = 11,
  CCC15 = _15,
  _16 = 12,
  CCC16 = _16,
  _17 = 13,
  CCC17 = _17,
  _18 = 14,
  CCC18 = _18,
  _19 = 15,
  CCC19 = _19,
  _20 = 16,
  CCC20 = _20,
  _21 = 17,
  CCC21 = _21,
  _22 = 18,
  CCC22 = _22,
  _23 = 19,
  CCC23 = _23,
  _24 = 20,
  CCC24 = _24,
  _25 = 21,
  CCC25 = _25,
  _26 = 22,
  CCC26 = _26,
  _27 = 23,
  CCC27 = _27,
  _28 = 24,
  CCC28 = _28,
  _29 = 25,
  CCC29 = _29,
  _30 = 26,
  CCC30 = _30,
  _31 = 27,
  CCC31 = _31,
  _32 = 28,
  CCC32 = _32,
  _33 = 29,
  CCC33 = _33,
  _34 = 30,
  CCC34 = _34,
  _35 = 31,
  CCC35 = _35,
  _36 = 32,
  CCC36 = _36,
  _84 = 33,
  CCC84 = _84,
  _91 = 34,
  CCC91 = _91,
  _103 = 35,
  CCC103 = _103,
  _107 = 36,
  CCC107 = _107,
  _118 = 37,
  CCC118 = _118,
  _122 = 38,
  CCC122 = _122,
  _129 = 39,
  CCC129 = _129,
  _130 = 40,
  CCC130 = _130,
  _132 = 41,
  CCC132 = _132,
  _200 = 42,
  ATBL = _200,
  Attached_Below_Left = _200,
  _202 = 43,
  ATB = _202,
  Attached_Below = _202,
  _214 = 44,
  ATA = _214,
  Attached_Above = _214,
  _216 = 45,
  ATAR = _216,
  Attached_Above_Right = _216,
  _218 = 46,
  BL = _218,
  Below_Left = _218,
  _220 = 47,
  B = _220,
  Below = _220,
  _222 = 48,
  BR = _222,
  Below_Right = _222,
  _224 = 49,
  L = _224,
  Left = _224,
  _226 = 50,
  R = _226,
  Right = _226,
  _228 = 51,
  AL = _228,
  Above_Left = _228,
  _230 = 52,
  A = _230,
  Above = _230,
  _232 = 53,
  AR = _232,
  Above_Right = _232,
  _233 = 54,
  DB = _233,
  Double_Below = _233,
  _234 = 55,
  DA = _234,
  Double_Above = _234,
  _240 = 56,
  IS = _240,
  Iota_Subscript = _240,
};
using ccc = Canonical_Combining_Class;

enum class Case_Ignorable : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CI = Case_Ignorable;

enum class Cased : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class Changes_When_Casefolded : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CWCF = Changes_When_Casefolded;

enum class Changes_When_Casemapped : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CWCM = Changes_When_Casemapped;

enum class Changes_When_Lowercased : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CWL = Changes_When_Lowercased;

enum class Changes_When_NFKC_Casefolded : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CWKCF = Changes_When_NFKC_Casefolded;

enum class Changes_When_Titlecased : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CWT = Changes_When_Titlecased;

enum class Changes_When_Uppercased : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CWU = Changes_When_Uppercased;

enum class Composition_Exclusion : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using CE = Composition_Exclusion;

enum class Dash : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class Decomposition_Type : uint8_t {
  Can = 0,
  Canonical = Can,
  can = Can,
  Com = 1,
  Compat = Com,
  com = Com,
  Enc = 2,
  Circle = Enc,
  enc = Enc,
  Fin = 3,
  Final = Fin,
  fin = Fin,
  Font = 4,
  font = Font,
  Fra = 5,
  Fraction = Fra,
  fra = Fra,
  Init = 6,
  Initial = Init,
  init = Init,
  Iso = 7,
  Isolated = Iso,
  iso = Iso,
  Med = 8,
  Medial = Med,
  med = Med,
  Nar = 9,
  Narrow = Nar,
  nar = Nar,
  Nb = 10,
  Nobreak = Nb,
  nb = Nb,
  None = 11,
  none = None,
  Sml = 12,
  Small = Sml,
  sml = Sml,
  Sqr = 13,
  Square = Sqr,
  sqr = Sqr,
  Sub = 14,
  sub = Sub,
  Sup = 15,
  Super = Sup,
  sup = Sup,
  Vert = 16,
  Vertical = Vert,
  vert = Vert,
  Wide = 17,
  wide = Wide,
};
using dt = Decomposition_Type;

enum class Default_Ignorable_Code_Point : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using DI = Default_Ignorable_Code_Point;

enum class Deprecated : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Dep = Deprecated;

enum class Diacritic : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Dia = Diacritic;

enum class East_Asian_Width : uint8_t {
  A = 0,
  Ambiguous = A,
  F = 1,
  Fullwidth = F,
  H = 2,
  Halfwidth = H,
  N = 3,
  Neutral = N,
  Na = 4,
  Narrow = Na,
  W = 5,
  Wide = W,
};
using ea = East_Asian_Width;

enum class Emoji : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class Emoji_Component : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using EComp = Emoji_Component;

enum class Emoji_Modifier : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using EMod = Emoji_Modifier;

enum class Emoji_Modifier_Base : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using EBase = Emoji_Modifier_Base;

enum class Emoji_Presentation : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using EPres = Emoji_Presentation;

enum class Expands_On_NFC : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using XO_NFC = Expands_On_NFC;

enum class Expands_On_NFD : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using XO_NFD = Expands_On_NFD;

enum class Expands_On_NFKC : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using XO_NFKC = Expands_On_NFKC;

enum class Expands_On_NFKD : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using XO_NFKD = Expands_On_NFKD;

enum class Extended_Pictographic : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using ExtPict = Extended_Pictographic;

enum class Extender : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Ext = Extender;

enum class Full_Composition_Exclusion : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Comp_Ex = Full_Composition_Exclusion;

enum class General_Category : uint8_t {
  Cc = 0,
  Control = Cc,
  cntrl = Cc,
  Cf = 1,
  Format = Cf,
  Cn = 2,
  Unassigned = Cn,
  Co = 3,
  Private_Use = Co,
  Cs = 4,
  Surrogate = Cs,
  Ll = 5,
  Lowercase_Letter = Ll,
  Lm = 6,
  Modifier_Letter = Lm,
  Lo = 7,
  Other_Letter = Lo,
  Lt = 8,
  Titlecase_Letter = Lt,
  Lu = 9,
  Uppercase_Letter = Lu,
  Mc = 10,
  Spacing_Mark = Mc,
  Me = 11,
  Enclosing_Mark = Me,
  Mn = 12,
  Nonspacing_Mark = Mn,
  Nd = 13,
  Decimal_Number = Nd,
  digit = Nd,
  Nl = 14,
  Letter_Number = Nl,
  No = 15,
  Other_Number = No,
  Pc = 16,
  Connector_Punctuation = Pc,
  Pd = 17,
  Dash_Punctuation = Pd,
  Pe = 18,
  Close_Punctuation = Pe,
  Pf = 19,
  Final_Punctuation = Pf,
  Pi = 20,
  Initial_Punctuation = Pi,
  Po = 21,
  Other_Punctuation = Po,
  Ps = 22,
  Open_Punctuation = Ps,
  Sc = 23,
  Currency_Symbol = Sc,
  Sk = 24,
  Modifier_Symbol = Sk,
  Sm = 25,
  Math_Symbol = Sm,
  So = 26,
  Other_Symbol = So,
  Zl = 27,
  Line_Separator = Zl,
  Zp = 28,
  Paragraph_Separator = Zp,
  Zs = 29,
  Space_Separator = Zs,
};
using gc = General_Category;

constexpr bool is_General_Category_C(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Cc, Cf, Cn, Co, Cs);
}

constexpr bool is_General_Category_L(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Ll, Lm, Lo, Lt, Lu);
}

constexpr bool is_General_Category_LC(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Ll, Lt, Lu);
}

constexpr bool is_General_Category_M(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Mc, Me, Mn);
}

constexpr bool is_General_Category_N(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Nd, Nl, No);
}

constexpr bool is_General_Category_P(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Pc, Pd, Pe, Pf, Pi, Po, Ps);
}

constexpr bool is_General_Category_S(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Sc, Sk, Sm, So);
}

constexpr bool is_General_Category_Z(General_Category c) noexcept {
  using enum General_Category;
  return clt::is_one_of(c, Zl, Zp, Zs);
}

enum class Grapheme_Base : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Gr_Base = Grapheme_Base;

enum class Grapheme_Cluster_Break : uint8_t {
  CN = 0,
  Control = CN,
  CR = 1,
  EB = 2,
  E_Base = EB,
  EBG = 3,
  E_Base_GAZ = EBG,
  EM = 4,
  E_Modifier = EM,
  EX = 5,
  Extend = EX,
  GAZ = 6,
  Glue_After_Zwj = GAZ,
  L = 7,
  LF = 8,
  LV = 9,
  LVT = 10,
  PP = 11,
  Prepend = PP,
  RI = 12,
  Regional_Indicator = RI,
  SM = 13,
  SpacingMark = SM,
  T = 14,
  V = 15,
  XX = 16,
  Other = XX,
  ZWJ = 17,
};
using GCB = Grapheme_Cluster_Break;

enum class Grapheme_Extend : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Gr_Ext = Grapheme_Extend;

enum class Grapheme_Link : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Gr_Link = Grapheme_Link;

enum class Hangul_Syllable_Type : uint8_t {
  L = 0,
  Leading_Jamo = L,
  LV = 1,
  LV_Syllable = LV,
  LVT = 2,
  LVT_Syllable = LVT,
  NA = 3,
  Not_Applicable = NA,
  T = 4,
  Trailing_Jamo = T,
  V = 5,
  Vowel_Jamo = V,
};
using hst = Hangul_Syllable_Type;

enum class Hex_Digit : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Hex = Hex_Digit;

enum class Hyphen : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class IDS_Binary_Operator : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using IDSB = IDS_Binary_Operator;

enum class IDS_Trinary_Operator : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using IDST = IDS_Trinary_Operator;

enum class IDS_Unary_Operator : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using IDSU = IDS_Unary_Operator;

enum class ID_Compat_Math_Continue : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class ID_Compat_Math_Start : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class ID_Continue : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using IDC = ID_Continue;

enum class ID_Start : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using IDS = ID_Start;

enum class Ideographic : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Ideo = Ideographic;

enum class Indic_Conjunct_Break : uint8_t {
  Consonant = 0,
  Extend = 1,
  Linker = 2,
  None = 3,
};
using InCB = Indic_Conjunct_Break;

enum class Indic_Positional_Category : uint8_t {
  Bottom = 0,
  Bottom_And_Left = 1,
  Bottom_And_Right = 2,
  Left = 3,
  Left_And_Right = 4,
  NA = 5,
  Overstruck = 6,
  Right = 7,
  Top = 8,
  Top_And_Bottom = 9,
  Top_And_Bottom_And_Left = 10,
  Top_And_Bottom_And_Right = 11,
  Top_And_Left = 12,
  Top_And_Left_And_Right = 13,
  Top_And_Right = 14,
  Visual_Order_Left = 15,
};
using InPC = Indic_Positional_Category;

enum class Indic_Syllabic_Category : uint8_t {
  Avagraha = 0,
  Bindu = 1,
  Brahmi_Joining_Number = 2,
  Cantillation_Mark = 3,
  Consonant = 4,
  Consonant_Dead = 5,
  Consonant_Final = 6,
  Consonant_Head_Letter = 7,
  Consonant_Initial_Postfixed = 8,
  Consonant_Killer = 9,
  Consonant_Medial = 10,
  Consonant_Placeholder = 11,
  Consonant_Preceding_Repha = 12,
  Consonant_Prefixed = 13,
  Consonant_Subjoined = 14,
  Consonant_Succeeding_Repha = 15,
  Consonant_With_Stacker = 16,
  Gemination_Mark = 17,
  Invisible_Stacker = 18,
  Joiner = 19,
  Modifying_Letter = 20,
  Non_Joiner = 21,
  Nukta = 22,
  Number = 23,
  Number_Joiner = 24,
  Other = 25,
  Pure_Killer = 26,
  Register_Shifter = 27,
  Reordering_Killer = 28,
  Syllable_Modifier = 29,
  Tone_Letter = 30,
  Tone_Mark = 31,
  Virama = 32,
  Visarga = 33,
  Vowel = 34,
  Vowel_Dependent = 35,
  Vowel_Independent = 36,
};
using InSC = Indic_Syllabic_Category;

enum class Jamo_Short_Name : uint8_t {
  A = 0,
  AE = 1,
  B = 2,
  BB = 3,
  BS = 4,
  C = 5,
  D = 6,
  DD = 7,
  E = 8,
  EO = 9,
  EU = 10,
  G = 11,
  GG = 12,
  GS = 13,
  H = 14,
  I = 15,
  J = 16,
  JJ = 17,
  K = 18,
  L = 19,
  LB = 20,
  LG = 21,
  LH = 22,
  LM = 23,
  LP = 24,
  LS = 25,
  LT = 26,
  M = 27,
  N = 28,
  NG = 29,
  NH = 30,
  NJ = 31,
  O = 32,
  OE = 33,
  P = 34,
  R = 35,
  S = 36,
  SS = 37,
  T = 38,
  U = 39,
  WA = 40,
  WAE = 41,
  WE = 42,
  WEO = 43,
  WI = 44,
  YA = 45,
  YAE = 46,
  YE = 47,
  YEO = 48,
  YI = 49,
  YO = 50,
  YU = 51,
};
using JSN = Jamo_Short_Name;

enum class Join_Control : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Join_C = Join_Control;

enum class Joining_Group : uint8_t {
  African_Feh = 0,
  African_Noon = 1,
  African_Qaf = 2,
  Ain = 3,
  Alaph = 4,
  Alef = 5,
  Beh = 6,
  Beth = 7,
  Burushaski_Yeh_Barree = 8,
  Dal = 9,
  Dalath_Rish = 10,
  E = 11,
  Farsi_Yeh = 12,
  Fe = 13,
  Feh = 14,
  Final_Semkath = 15,
  Gaf = 16,
  Gamal = 17,
  Hah = 18,
  Hanifi_Rohingya_Kinna_Ya = 19,
  Hanifi_Rohingya_Pa = 20,
  He = 21,
  Heh = 22,
  Heh_Goal = 23,
  Heth = 24,
  Kaf = 25,
  Kaph = 26,
  Kashmiri_Yeh = 27,
  Khaph = 28,
  Knotted_Heh = 29,
  Lam = 30,
  Lamadh = 31,
  Malayalam_Bha = 32,
  Malayalam_Ja = 33,
  Malayalam_Lla = 34,
  Malayalam_Llla = 35,
  Malayalam_Nga = 36,
  Malayalam_Nna = 37,
  Malayalam_Nnna = 38,
  Malayalam_Nya = 39,
  Malayalam_Ra = 40,
  Malayalam_Ssa = 41,
  Malayalam_Tta = 42,
  Manichaean_Aleph = 43,
  Manichaean_Ayin = 44,
  Manichaean_Beth = 45,
  Manichaean_Daleth = 46,
  Manichaean_Dhamedh = 47,
  Manichaean_Five = 48,
  Manichaean_Gimel = 49,
  Manichaean_Heth = 50,
  Manichaean_Hundred = 51,
  Manichaean_Kaph = 52,
  Manichaean_Lamedh = 53,
  Manichaean_Mem = 54,
  Manichaean_Nun = 55,
  Manichaean_One = 56,
  Manichaean_Pe = 57,
  Manichaean_Qoph = 58,
  Manichaean_Resh = 59,
  Manichaean_Sadhe = 60,
  Manichaean_Samekh = 61,
  Manichaean_Taw = 62,
  Manichaean_Ten = 63,
  Manichaean_Teth = 64,
  Manichaean_Thamedh = 65,
  Manichaean_Twenty = 66,
  Manichaean_Waw = 67,
  Manichaean_Yodh = 68,
  Manichaean_Zayin = 69,
  Meem = 70,
  Mim = 71,
  No_Joining_Group = 72,
  Noon = 73,
  Nun = 74,
  Nya = 75,
  Pe = 76,
  Qaf = 77,
  Qaph = 78,
  Reh = 79,
  Reversed_Pe = 80,
  Rohingya_Yeh = 81,
  Sad = 82,
  Sadhe = 83,
  Seen = 84,
  Semkath = 85,
  Shin = 86,
  Straight_Waw = 87,
  Swash_Kaf = 88,
  Syriac_Waw = 89,
  Tah = 90,
  Taw = 91,
  Teh_Marbuta = 92,
  Teh_Marbuta_Goal = 93,
  Hamza_On_Heh_Goal = Teh_Marbuta_Goal,
  Teth = 94,
  Thin_Yeh = 95,
  Vertical_Tail = 96,
  Waw = 97,
  Yeh = 98,
  Yeh_Barree = 99,
  Yeh_With_Tail = 100,
  Yudh = 101,
  Yudh_He = 102,
  Zain = 103,
  Zhain = 104,
};
using jg = Joining_Group;

enum class Joining_Type : uint8_t {
  C = 0,
  Join_Causing = C,
  D = 1,
  Dual_Joining = D,
  L = 2,
  Left_Joining = L,
  R = 3,
  Right_Joining = R,
  T = 4,
  Transparent = T,
  U = 5,
  Non_Joining = U,
};
using jt = Joining_Type;

enum class Line_Break : uint8_t {
  AI = 0,
  Ambiguous = AI,
  AK = 1,
  Aksara = AK,
  AL = 2,
  Alphabetic = AL,
  AP = 3,
  Aksara_Prebase = AP,
  AS = 4,
  Aksara_Start = AS,
  B2 = 5,
  Break_Both = B2,
  BA = 6,
  Break_After = BA,
  BB = 7,
  Break_Before = BB,
  BK = 8,
  Mandatory_Break = BK,
  CB = 9,
  Contingent_Break = CB,
  CJ = 10,
  Conditional_Japanese_Starter = CJ,
  CL = 11,
  Close_Punctuation = CL,
  CM = 12,
  Combining_Mark = CM,
  CP = 13,
  Close_Parenthesis = CP,
  CR = 14,
  Carriage_Return = CR,
  EB = 15,
  E_Base = EB,
  EM = 16,
  E_Modifier = EM,
  EX = 17,
  Exclamation = EX,
  GL = 18,
  Glue = GL,
  H2 = 19,
  H3 = 20,
  HL = 21,
  Hebrew_Letter = HL,
  HY = 22,
  Hyphen = HY,
  ID = 23,
  Ideographic = ID,
  IN = 24,
  Inseparable = IN,
  Inseperable = IN,
  IS = 25,
  Infix_Numeric = IS,
  JL = 26,
  JT = 27,
  JV = 28,
  LF = 29,
  Line_Feed = LF,
  NL = 30,
  Next_Line = NL,
  NS = 31,
  Nonstarter = NS,
  NU = 32,
  Numeric = NU,
  OP = 33,
  Open_Punctuation = OP,
  PO = 34,
  Postfix_Numeric = PO,
  PR = 35,
  Prefix_Numeric = PR,
  QU = 36,
  Quotation = QU,
  RI = 37,
  Regional_Indicator = RI,
  SA = 38,
  Complex_Context = SA,
  SG = 39,
  Surrogate = SG,
  SP = 40,
  Space = SP,
  SY = 41,
  Break_Symbols = SY,
  VF = 42,
  Virama_Final = VF,
  VI = 43,
  Virama = VI,
  WJ = 44,
  Word_Joiner = WJ,
  XX = 45,
  Unknown = XX,
  ZW = 46,
  ZWSpace = ZW,
  ZWJ = 47,
};
using lb = Line_Break;

enum class Logical_Order_Exception : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using LOE = Logical_Order_Exception;

enum class Lowercase : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Lower = Lowercase;

enum class Math : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class Modifier_Combining_Mark : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using MCM = Modifier_Combining_Mark;

enum class NFC_Quick_Check : uint8_t {
  M = 0,
  Maybe = M,
  N = 1,
  No = N,
  Y = 2,
  Yes = Y,
};
using NFC_QC = NFC_Quick_Check;

enum class NFD_Quick_Check : uint8_t {
  N = 0,
  No = N,
  Y = 1,
  Yes = Y,
};
using NFD_QC = NFD_Quick_Check;

enum class NFKC_Quick_Check : uint8_t {
  M = 0,
  Maybe = M,
  N = 1,
  No = N,
  Y = 2,
  Yes = Y,
};
using NFKC_QC = NFKC_Quick_Check;

enum class NFKD_Quick_Check : uint8_t {
  N = 0,
  No = N,
  Y = 1,
  Yes = Y,
};
using NFKD_QC = NFKD_Quick_Check;

enum class Noncharacter_Code_Point : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using NChar = Noncharacter_Code_Point;

enum class Numeric_Type : uint8_t {
  De = 0,
  Decimal = De,
  Di = 1,
  Digit = Di,
  None = 2,
  Nu = 3,
  Numeric = Nu,
};
using nt = Numeric_Type;

enum class Other_Alphabetic : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OAlpha = Other_Alphabetic;

enum class Other_Default_Ignorable_Code_Point : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using ODI = Other_Default_Ignorable_Code_Point;

enum class Other_Grapheme_Extend : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OGr_Ext = Other_Grapheme_Extend;

enum class Other_ID_Continue : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OIDC = Other_ID_Continue;

enum class Other_ID_Start : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OIDS = Other_ID_Start;

enum class Other_Lowercase : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OLower = Other_Lowercase;

enum class Other_Math : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OMath = Other_Math;

enum class Other_Uppercase : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using OUpper = Other_Uppercase;

enum class Pattern_Syntax : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Pat_Syn = Pattern_Syntax;

enum class Pattern_White_Space : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Pat_WS = Pattern_White_Space;

enum class Prepended_Concatenation_Mark : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using PCM = Prepended_Concatenation_Mark;

enum class Quotation_Mark : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using QMark = Quotation_Mark;

enum class Radical : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class Regional_Indicator : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using RI = Regional_Indicator;

enum class Script : uint8_t {
  Adlm = 0,
  Adlam = Adlm,
  Aghb = 1,
  Caucasian_Albanian = Aghb,
  Ahom = 2,
  Arab = 3,
  Arabic = Arab,
  Armi = 4,
  Imperial_Aramaic = Armi,
  Armn = 5,
  Armenian = Armn,
  Avst = 6,
  Avestan = Avst,
  Bali = 7,
  Balinese = Bali,
  Bamu = 8,
  Bamum = Bamu,
  Bass = 9,
  Bassa_Vah = Bass,
  Batk = 10,
  Batak = Batk,
  Beng = 11,
  Bengali = Beng,
  Bhks = 12,
  Bhaiksuki = Bhks,
  Bopo = 13,
  Bopomofo = Bopo,
  Brah = 14,
  Brahmi = Brah,
  Brai = 15,
  Braille = Brai,
  Bugi = 16,
  Buginese = Bugi,
  Buhd = 17,
  Buhid = Buhd,
  Cakm = 18,
  Chakma = Cakm,
  Cans = 19,
  Canadian_Aboriginal = Cans,
  Cari = 20,
  Carian = Cari,
  Cham = 21,
  Cher = 22,
  Cherokee = Cher,
  Chrs = 23,
  Chorasmian = Chrs,
  Copt = 24,
  Coptic = Copt,
  Qaac = Copt,
  Cpmn = 25,
  Cypro_Minoan = Cpmn,
  Cprt = 26,
  Cypriot = Cprt,
  Cyrl = 27,
  Cyrillic = Cyrl,
  Deva = 28,
  Devanagari = Deva,
  Diak = 29,
  Dives_Akuru = Diak,
  Dogr = 30,
  Dogra = Dogr,
  Dsrt = 31,
  Deseret = Dsrt,
  Dupl = 32,
  Duployan = Dupl,
  Egyp = 33,
  Egyptian_Hieroglyphs = Egyp,
  Elba = 34,
  Elbasan = Elba,
  Elym = 35,
  Elymaic = Elym,
  Ethi = 36,
  Ethiopic = Ethi,
  Gara = 37,
  Garay = Gara,
  Geor = 38,
  Georgian = Geor,
  Glag = 39,
  Glagolitic = Glag,
  Gong = 40,
  Gunjala_Gondi = Gong,
  Gonm = 41,
  Masaram_Gondi = Gonm,
  Goth = 42,
  Gothic = Goth,
  Gran = 43,
  Grantha = Gran,
  Grek = 44,
  Greek = Grek,
  Gujr = 45,
  Gujarati = Gujr,
  Gukh = 46,
  Gurung_Khema = Gukh,
  Guru = 47,
  Gurmukhi = Guru,
  Hang = 48,
  Hangul = Hang,
  Hani = 49,
  Han = Hani,
  Hano = 50,
  Hanunoo = Hano,
  Hatr = 51,
  Hatran = Hatr,
  Hebr = 52,
  Hebrew = Hebr,
  Hira = 53,
  Hiragana = Hira,
  Hluw = 54,
  Anatolian_Hieroglyphs = Hluw,
  Hmng = 55,
  Pahawh_Hmong = Hmng,
  Hmnp = 56,
  Nyiakeng_Puachue_Hmong = Hmnp,
  Hrkt = 57,
  Katakana_Or_Hiragana = Hrkt,
  Hung = 58,
  Old_Hungarian = Hung,
  Ital = 59,
  Old_Italic = Ital,
  Java = 60,
  Javanese = Java,
  Kali = 61,
  Kayah_Li = Kali,
  Kana = 62,
  Katakana = Kana,
  Kawi = 63,
  Khar = 64,
  Kharoshthi = Khar,
  Khmr = 65,
  Khmer = Khmr,
  Khoj = 66,
  Khojki = Khoj,
  Kits = 67,
  Khitan_Small_Script = Kits,
  Knda = 68,
  Kannada = Knda,
  Krai = 69,
  Kirat_Rai = Krai,
  Kthi = 70,
  Kaithi = Kthi,
  Lana = 71,
  Tai_Tham = Lana,
  Laoo = 72,
  Lao = Laoo,
  Latn = 73,
  Latin = Latn,
  Lepc = 74,
  Lepcha = Lepc,
  Limb = 75,
  Limbu = Limb,
  Lina = 76,
  Linear_A = Lina,
  Linb = 77,
  Linear_B = Linb,
  Lisu = 78,
  Lyci = 79,
  Lycian = Lyci,
  Lydi = 80,
  Lydian = Lydi,
  Mahj = 81,
  Mahajani = Mahj,
  Maka = 82,
  Makasar = Maka,
  Mand = 83,
  Mandaic = Mand,
  Mani = 84,
  Manichaean = Mani,
  Marc = 85,
  Marchen = Marc,
  Medf = 86,
  Medefaidrin = Medf,
  Mend = 87,
  Mende_Kikakui = Mend,
  Merc = 88,
  Meroitic_Cursive = Merc,
  Mero = 89,
  Meroitic_Hieroglyphs = Mero,
  Mlym = 90,
  Malayalam = Mlym,
  Modi = 91,
  Mong = 92,
  Mongolian = Mong,
  Mroo = 93,
  Mro = Mroo,
  Mtei = 94,
  Meetei_Mayek = Mtei,
  Mult = 95,
  Multani = Mult,
  Mymr = 96,
  Myanmar = Mymr,
  Nagm = 97,
  Nag_Mundari = Nagm,
  Nand = 98,
  Nandinagari = Nand,
  Narb = 99,
  Old_North_Arabian = Narb,
  Nbat = 100,
  Nabataean = Nbat,
  Newa = 101,
  Nkoo = 102,
  Nko = Nkoo,
  Nshu = 103,
  Nushu = Nshu,
  Ogam = 104,
  Ogham = Ogam,
  Olck = 105,
  Ol_Chiki = Olck,
  Onao = 106,
  Ol_Onal = Onao,
  Orkh = 107,
  Old_Turkic = Orkh,
  Orya = 108,
  Oriya = Orya,
  Osge = 109,
  Osage = Osge,
  Osma = 110,
  Osmanya = Osma,
  Ougr = 111,
  Old_Uyghur = Ougr,
  Palm = 112,
  Palmyrene = Palm,
  Pauc = 113,
  Pau_Cin_Hau = Pauc,
  Perm = 114,
  Old_Permic = Perm,
  Phag = 115,
  Phags_Pa = Phag,
  Phli = 116,
  Inscriptional_Pahlavi = Phli,
  Phlp = 117,
  Psalter_Pahlavi = Phlp,
  Phnx = 118,
  Phoenician = Phnx,
  Plrd = 119,
  Miao = Plrd,
  Prti = 120,
  Inscriptional_Parthian = Prti,
  Rjng = 121,
  Rejang = Rjng,
  Rohg = 122,
  Hanifi_Rohingya = Rohg,
  Runr = 123,
  Runic = Runr,
  Samr = 124,
  Samaritan = Samr,
  Sarb = 125,
  Old_South_Arabian = Sarb,
  Saur = 126,
  Saurashtra = Saur,
  Sgnw = 127,
  SignWriting = Sgnw,
  Shaw = 128,
  Shavian = Shaw,
  Shrd = 129,
  Sharada = Shrd,
  Sidd = 130,
  Siddham = Sidd,
  Sind = 131,
  Khudawadi = Sind,
  Sinh = 132,
  Sinhala = Sinh,
  Sogd = 133,
  Sogdian = Sogd,
  Sogo = 134,
  Old_Sogdian = Sogo,
  Sora = 135,
  Sora_Sompeng = Sora,
  Soyo = 136,
  Soyombo = Soyo,
  Sund = 137,
  Sundanese = Sund,
  Sunu = 138,
  Sunuwar = Sunu,
  Sylo = 139,
  Syloti_Nagri = Sylo,
  Syrc = 140,
  Syriac = Syrc,
  Tagb = 141,
  Tagbanwa = Tagb,
  Takr = 142,
  Takri = Takr,
  Tale = 143,
  Tai_Le = Tale,
  Talu = 144,
  New_Tai_Lue = Talu,
  Taml = 145,
  Tamil = Taml,
  Tang = 146,
  Tangut = Tang,
  Tavt = 147,
  Tai_Viet = Tavt,
  Telu = 148,
  Telugu = Telu,
  Tfng = 149,
  Tifinagh = Tfng,
  Tglg = 150,
  Tagalog = Tglg,
  Thaa = 151,
  Thaana = Thaa,
  Thai = 152,
  Tibt = 153,
  Tibetan = Tibt,
  Tirh = 154,
  Tirhuta = Tirh,
  Tnsa = 155,
  Tangsa = Tnsa,
  Todr = 156,
  Todhri = Todr,
  Toto = 157,
  Tutg = 158,
  Tulu_Tigalari = Tutg,
  Ugar = 159,
  Ugaritic = Ugar,
  Vaii = 160,
  Vai = Vaii,
  Vith = 161,
  Vithkuqi = Vith,
  Wara = 162,
  Warang_Citi = Wara,
  Wcho = 163,
  Wancho = Wcho,
  Xpeo = 164,
  Old_Persian = Xpeo,
  Xsux = 165,
  Cuneiform = Xsux,
  Yezi = 166,
  Yezidi = Yezi,
  Yiii = 167,
  Yi = Yiii,
  Zanb = 168,
  Zanabazar_Square = Zanb,
  Zinh = 169,
  Inherited = Zinh,
  Qaai = Zinh,
  Zyyy = 170,
  Common = Zyyy,
  Zzzz = 171,
  Unknown = Zzzz,
};
using sc = Script;

enum class Sentence_Break : uint8_t {
  AT = 0,
  ATerm = AT,
  CL = 1,
  Close = CL,
  CR = 2,
  EX = 3,
  Extend = EX,
  FO = 4,
  Format = FO,
  LE = 5,
  OLetter = LE,
  LF = 6,
  LO = 7,
  Lower = LO,
  NU = 8,
  Numeric = NU,
  SC = 9,
  SContinue = SC,
  SE = 10,
  Sep = SE,
  SP = 11,
  Sp = SP,
  ST = 12,
  STerm = ST,
  UP = 13,
  Upper = UP,
  XX = 14,
  Other = XX,
};
using SB = Sentence_Break;

enum class Sentence_Terminal : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using STerm = Sentence_Terminal;

enum class Soft_Dotted : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using SD = Soft_Dotted;

enum class Terminal_Punctuation : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Term = Terminal_Punctuation;

enum class Unified_Ideograph : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using UIdeo = Unified_Ideograph;

enum class Uppercase : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using Upper = Uppercase;

enum class Variation_Selector : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using VS = Variation_Selector;

enum class Vertical_Orientation : uint8_t {
  R = 0,
  Rotated = R,
  Tr = 1,
  Transformed_Rotated = Tr,
  Tu = 2,
  Transformed_Upright = Tu,
  U = 3,
  Upright = U,
};
using vo = Vertical_Orientation;

enum class White_Space : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using WSpace = White_Space;

enum class Word_Break : uint8_t {
  CR = 0,
  DQ = 1,
  Double_Quote = DQ,
  EB = 2,
  E_Base = EB,
  EBG = 3,
  E_Base_GAZ = EBG,
  EM = 4,
  E_Modifier = EM,
  EX = 5,
  ExtendNumLet = EX,
  Extend = 6,
  FO = 7,
  Format = FO,
  GAZ = 8,
  Glue_After_Zwj = GAZ,
  HL = 9,
  Hebrew_Letter = HL,
  KA = 10,
  Katakana = KA,
  LE = 11,
  ALetter = LE,
  LF = 12,
  MB = 13,
  MidNumLet = MB,
  ML = 14,
  MidLetter = ML,
  MN = 15,
  MidNum = MN,
  NL = 16,
  Newline = NL,
  NU = 17,
  Numeric = NU,
  RI = 18,
  Regional_Indicator = RI,
  SQ = 19,
  Single_Quote = SQ,
  WSegSpace = 20,
  XX = 21,
  Other = XX,
  ZWJ = 22,
};
using WB = Word_Break;

enum class XID_Continue : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using XIDC = XID_Continue;

enum class XID_Start : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};
using XIDS = XID_Start;

enum class kEH_NoMirror : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

enum class kEH_NoRotate : uint8_t {
  N = 0,
  No = N,
  F = N,
  False = N,
  Y = 1,
  Yes = Y,
  T = Y,
  True = Y,
};

} // namespace clt::uni

#endif // !__COLT_UNICODE_PROPERTIES__

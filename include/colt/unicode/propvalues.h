// !! Generated by unicodedata_to_cxx.py !!
#ifndef __COLT_UNICODE_PROPVALUES__
#define __COLT_UNICODE_PROPVALUES__

#include <limits>
#include "colt/unicode/properties.h"
#include "colt/typedefs.h"

namespace clt::uni {
  struct CodePointProperties {
    // ASCII_Hex_Digit <=> AHex (binary property)
    ASCII_Hex_Digit _ASCII_Hex_Digit;
    // Age <=> age (enumerated property)
    Age _Age;
    // Alphabetic <=> Alpha (binary property)
    Alphabetic _Alphabetic;
    // Bidi_Class <=> bc (enumerated property)
    Bidi_Class _Bidi_Class;
    // Bidi_Control <=> Bidi_C (binary property)
    Bidi_Control _Bidi_Control;
    // Bidi_Mirrored <=> Bidi_M (binary property)
    Bidi_Mirrored _Bidi_Mirrored;
    // Bidi_Mirroring_Glyph <=> bmg (string property)
    const char* _Bidi_Mirroring_Glyph;

    static consteval auto default_value_Bidi_Paired_Bracket(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // Bidi_Paired_Bracket <=> bpb (string property)
    const char* _Bidi_Paired_Bracket;

    static consteval auto default_value_Bidi_Paired_Bracket_Type(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return Bidi_Paired_Bracket_Type::n;
      clt::unreachable("Invalid code point!");
    }
    // Bidi_Paired_Bracket_Type <=> bpt (enumerated property)
    Bidi_Paired_Bracket_Type _Bidi_Paired_Bracket_Type;
    // Block <=> blk (enumerated property)
    Block _Block;
    // Canonical_Combining_Class <=> ccc (enumerated property)
    Canonical_Combining_Class _Canonical_Combining_Class;

    static consteval auto default_value_Case_Folding(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Case_Folding <=> cf (char32_t* property)
    char32_t* _Case_Folding;
    // Case_Ignorable <=> CI (binary property)
    Case_Ignorable _Case_Ignorable;
    // Cased <=> Cased (binary property)
    Cased _Cased;
    // Changes_When_Casefolded <=> CWCF (binary property)
    Changes_When_Casefolded _Changes_When_Casefolded;
    // Changes_When_Casemapped <=> CWCM (binary property)
    Changes_When_Casemapped _Changes_When_Casemapped;
    // Changes_When_Lowercased <=> CWL (binary property)
    Changes_When_Lowercased _Changes_When_Lowercased;
    // Changes_When_NFKC_Casefolded <=> CWKCF (binary property)
    Changes_When_NFKC_Casefolded _Changes_When_NFKC_Casefolded;
    // Changes_When_Titlecased <=> CWT (binary property)
    Changes_When_Titlecased _Changes_When_Titlecased;
    // Changes_When_Uppercased <=> CWU (binary property)
    Changes_When_Uppercased _Changes_When_Uppercased;
    // Composition_Exclusion <=> CE (binary property)
    Composition_Exclusion _Composition_Exclusion;
    // Dash <=> Dash (binary property)
    Dash _Dash;

    static consteval auto default_value_Decomposition_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Decomposition_Mapping <=> dm (char32_t* property)
    char32_t* _Decomposition_Mapping;
    // Decomposition_Type <=> dt (enumerated property)
    Decomposition_Type _Decomposition_Type;
    // Default_Ignorable_Code_Point <=> DI (binary property)
    Default_Ignorable_Code_Point _Default_Ignorable_Code_Point;
    // Deprecated <=> Dep (binary property)
    Deprecated _Deprecated;
    // Diacritic <=> Dia (binary property)
    Diacritic _Diacritic;
    // East_Asian_Width <=> ea (enumerated property)
    East_Asian_Width _East_Asian_Width;
    // Emoji <=> Emoji (binary property)
    Emoji _Emoji;
    // Emoji_Component <=> EComp (binary property)
    Emoji_Component _Emoji_Component;
    // Emoji_Modifier <=> EMod (binary property)
    Emoji_Modifier _Emoji_Modifier;
    // Emoji_Modifier_Base <=> EBase (binary property)
    Emoji_Modifier_Base _Emoji_Modifier_Base;
    // Emoji_Presentation <=> EPres (binary property)
    Emoji_Presentation _Emoji_Presentation;
    // Equivalent_Unified_Ideograph <=> EqUIdeo (string property)
    const char* _Equivalent_Unified_Ideograph;
    // Expands_On_NFC <=> XO_NFC (binary property)
    Expands_On_NFC _Expands_On_NFC;
    // Expands_On_NFD <=> XO_NFD (binary property)
    Expands_On_NFD _Expands_On_NFD;
    // Expands_On_NFKC <=> XO_NFKC (binary property)
    Expands_On_NFKC _Expands_On_NFKC;
    // Expands_On_NFKD <=> XO_NFKD (binary property)
    Expands_On_NFKD _Expands_On_NFKD;
    // Extended_Pictographic <=> ExtPict (binary property)
    Extended_Pictographic _Extended_Pictographic;
    // Extender <=> Ext (binary property)
    Extender _Extender;

    static consteval auto default_value_FC_NFKC_Closure(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // FC_NFKC_Closure <=> FC_NFKC (char32_t* property)
    char32_t* _FC_NFKC_Closure;
    // Full_Composition_Exclusion <=> Comp_Ex (binary property)
    Full_Composition_Exclusion _Full_Composition_Exclusion;

    static consteval auto default_value_General_Category(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return General_Category::Unassigned;
      clt::unreachable("Invalid code point!");
    }
    // General_Category <=> gc (enumerated property)
    General_Category _General_Category;
    // Grapheme_Base <=> Gr_Base (binary property)
    Grapheme_Base _Grapheme_Base;
    // Grapheme_Cluster_Break <=> GCB (enumerated property)
    Grapheme_Cluster_Break _Grapheme_Cluster_Break;
    // Grapheme_Extend <=> Gr_Ext (binary property)
    Grapheme_Extend _Grapheme_Extend;
    // Grapheme_Link <=> Gr_Link (binary property)
    Grapheme_Link _Grapheme_Link;
    // Hangul_Syllable_Type <=> hst (enumerated property)
    Hangul_Syllable_Type _Hangul_Syllable_Type;
    // Hex_Digit <=> Hex (binary property)
    Hex_Digit _Hex_Digit;
    // Hyphen <=> Hyphen (binary property)
    Hyphen _Hyphen;
    // IDS_Binary_Operator <=> IDSB (binary property)
    IDS_Binary_Operator _IDS_Binary_Operator;
    // IDS_Trinary_Operator <=> IDST (binary property)
    IDS_Trinary_Operator _IDS_Trinary_Operator;
    // IDS_Unary_Operator <=> IDSU (binary property)
    IDS_Unary_Operator _IDS_Unary_Operator;
    // ID_Compat_Math_Continue <=> ID_Compat_Math_Continue (binary property)
    ID_Compat_Math_Continue _ID_Compat_Math_Continue;
    // ID_Compat_Math_Start <=> ID_Compat_Math_Start (binary property)
    ID_Compat_Math_Start _ID_Compat_Math_Start;
    // ID_Continue <=> IDC (binary property)
    ID_Continue _ID_Continue;
    // ID_Start <=> IDS (binary property)
    ID_Start _ID_Start;
    // Ideographic <=> Ideo (binary property)
    Ideographic _Ideographic;
    // Indic_Conjunct_Break <=> InCB (enumerated property)
    Indic_Conjunct_Break _Indic_Conjunct_Break;
    // Indic_Positional_Category <=> InPC (enumerated property)
    Indic_Positional_Category _Indic_Positional_Category;
    // Indic_Syllabic_Category <=> InSC (enumerated property)
    Indic_Syllabic_Category _Indic_Syllabic_Category;

    static consteval auto default_value_Jamo_Short_Name(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // Jamo_Short_Name <=> JSN (string property)
    const char* _Jamo_Short_Name;
    // Join_Control <=> Join_C (binary property)
    Join_Control _Join_Control;
    // Joining_Group <=> jg (enumerated property)
    Joining_Group _Joining_Group;
    // Joining_Type <=> jt (enumerated property)
    Joining_Type _Joining_Type;
    // Line_Break <=> lb (enumerated property)
    Line_Break _Line_Break;
    // Logical_Order_Exception <=> LOE (binary property)
    Logical_Order_Exception _Logical_Order_Exception;
    // Lowercase <=> Lower (binary property)
    Lowercase _Lowercase;

    static consteval auto default_value_Lowercase_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Lowercase_Mapping <=> lc (char32_t* property)
    char32_t* _Lowercase_Mapping;
    // Math <=> Math (binary property)
    Math _Math;
    // Modifier_Combining_Mark <=> MCM (binary property)
    Modifier_Combining_Mark _Modifier_Combining_Mark;
    // NFC_Quick_Check <=> NFC_QC (binary property)
    NFC_Quick_Check _NFC_Quick_Check;
    // NFD_Quick_Check <=> NFD_QC (binary property)
    NFD_Quick_Check _NFD_Quick_Check;
    // NFKC_Casefold <=> NFKC_CF (string property)
    const char* _NFKC_Casefold;
    // NFKC_Quick_Check <=> NFKC_QC (binary property)
    NFKC_Quick_Check _NFKC_Quick_Check;
    // NFKC_Simple_Casefold <=> NFKC_SCF (string property)
    const char* _NFKC_Simple_Casefold;
    // NFKD_Quick_Check <=> NFKD_QC (binary property)
    NFKD_Quick_Check _NFKD_Quick_Check;

    static consteval auto default_value_Name(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // Name <=> na (string property)
    const char* _Name;

    static consteval auto default_value_Name_Alias(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // Name_Alias <=> Name_Alias (string property)
    const char* _Name_Alias;
    // Noncharacter_Code_Point <=> NChar (binary property)
    Noncharacter_Code_Point _Noncharacter_Code_Point;
    // Numeric_Type <=> nt (enumerated property)
    Numeric_Type _Numeric_Type;

    static consteval auto default_value_Numeric_Value(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return std::numeric_limits<double>::quiet_NaN();
      clt::unreachable("Invalid code point!");
    }
    // Numeric_Value <=> nv (numeric property)
    double _Numeric_Value;
    // Other_Alphabetic <=> OAlpha (binary property)
    Other_Alphabetic _Other_Alphabetic;
    // Other_Default_Ignorable_Code_Point <=> ODI (binary property)
    Other_Default_Ignorable_Code_Point _Other_Default_Ignorable_Code_Point;
    // Other_Grapheme_Extend <=> OGr_Ext (binary property)
    Other_Grapheme_Extend _Other_Grapheme_Extend;
    // Other_ID_Continue <=> OIDC (binary property)
    Other_ID_Continue _Other_ID_Continue;
    // Other_ID_Start <=> OIDS (binary property)
    Other_ID_Start _Other_ID_Start;
    // Other_Lowercase <=> OLower (binary property)
    Other_Lowercase _Other_Lowercase;
    // Other_Math <=> OMath (binary property)
    Other_Math _Other_Math;
    // Other_Uppercase <=> OUpper (binary property)
    Other_Uppercase _Other_Uppercase;
    // Pattern_Syntax <=> Pat_Syn (binary property)
    Pattern_Syntax _Pattern_Syntax;
    // Pattern_White_Space <=> Pat_WS (binary property)
    Pattern_White_Space _Pattern_White_Space;
    // Prepended_Concatenation_Mark <=> PCM (binary property)
    Prepended_Concatenation_Mark _Prepended_Concatenation_Mark;
    // Quotation_Mark <=> QMark (binary property)
    Quotation_Mark _Quotation_Mark;
    // Radical <=> Radical (binary property)
    Radical _Radical;
    // Regional_Indicator <=> RI (binary property)
    Regional_Indicator _Regional_Indicator;
    // Script <=> sc (enumerated property)
    Script _Script;
    // Sentence_Break <=> SB (enumerated property)
    Sentence_Break _Sentence_Break;
    // Sentence_Terminal <=> STerm (binary property)
    Sentence_Terminal _Sentence_Terminal;

    static consteval auto default_value_Simple_Case_Folding(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Simple_Case_Folding <=> scf (char32_t* property)
    char32_t* _Simple_Case_Folding;

    static consteval auto default_value_Simple_Lowercase_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Simple_Lowercase_Mapping <=> slc (char32_t* property)
    char32_t* _Simple_Lowercase_Mapping;

    static consteval auto default_value_Simple_Titlecase_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Simple_Titlecase_Mapping <=> stc (char32_t* property)
    char32_t* _Simple_Titlecase_Mapping;

    static consteval auto default_value_Simple_Uppercase_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Simple_Uppercase_Mapping <=> suc (char32_t* property)
    char32_t* _Simple_Uppercase_Mapping;
    // Soft_Dotted <=> SD (binary property)
    Soft_Dotted _Soft_Dotted;
    // Terminal_Punctuation <=> Term (binary property)
    Terminal_Punctuation _Terminal_Punctuation;

    static consteval auto default_value_Titlecase_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Titlecase_Mapping <=> tc (char32_t* property)
    char32_t* _Titlecase_Mapping;

    static consteval auto default_value_Unicode_1_Name(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // Unicode_1_Name <=> na1 (string property)
    const char* _Unicode_1_Name;
    // Unified_Ideograph <=> UIdeo (binary property)
    Unified_Ideograph _Unified_Ideograph;
    // Uppercase <=> Upper (binary property)
    Uppercase _Uppercase;

    static consteval auto default_value_Uppercase_Mapping(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // Uppercase_Mapping <=> uc (char32_t* property)
    char32_t* _Uppercase_Mapping;
    // Variation_Selector <=> VS (binary property)
    Variation_Selector _Variation_Selector;
    // Vertical_Orientation <=> vo (enumerated property)
    Vertical_Orientation _Vertical_Orientation;
    // White_Space <=> WSpace (binary property)
    White_Space _White_Space;
    // Word_Break <=> WB (enumerated property)
    Word_Break _Word_Break;
    // XID_Continue <=> XIDC (binary property)
    XID_Continue _XID_Continue;
    // XID_Start <=> XIDS (binary property)
    XID_Start _XID_Start;

    static consteval auto default_value_cjkAccountingNumeric(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return std::numeric_limits<double>::quiet_NaN();
      clt::unreachable("Invalid code point!");
    }
    // cjkAccountingNumeric <=> cjkAccountingNumeric (numeric property)
    double _cjkAccountingNumeric;

    static consteval auto default_value_cjkCompatibilityVariant(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return cp;
      clt::unreachable("Invalid code point!");
    }
    // cjkCompatibilityVariant <=> cjkCompatibilityVariant (char32_t* property)
    char32_t* _cjkCompatibilityVariant;

    static consteval auto default_value_cjkIICore(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIICore <=> cjkIICore (string property)
    const char* _cjkIICore;

    static consteval auto default_value_cjkIRG_GSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_GSource <=> cjkIRG_GSource (string property)
    const char* _cjkIRG_GSource;

    static consteval auto default_value_cjkIRG_HSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_HSource <=> cjkIRG_HSource (string property)
    const char* _cjkIRG_HSource;

    static consteval auto default_value_cjkIRG_JSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_JSource <=> cjkIRG_JSource (string property)
    const char* _cjkIRG_JSource;

    static consteval auto default_value_cjkIRG_KPSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_KPSource <=> cjkIRG_KPSource (string property)
    const char* _cjkIRG_KPSource;

    static consteval auto default_value_cjkIRG_KSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_KSource <=> cjkIRG_KSource (string property)
    const char* _cjkIRG_KSource;

    static consteval auto default_value_cjkIRG_MSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_MSource <=> cjkIRG_MSource (string property)
    const char* _cjkIRG_MSource;

    static consteval auto default_value_cjkIRG_SSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_SSource <=> cjkIRG_SSource (string property)
    const char* _cjkIRG_SSource;

    static consteval auto default_value_cjkIRG_TSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_TSource <=> cjkIRG_TSource (string property)
    const char* _cjkIRG_TSource;

    static consteval auto default_value_cjkIRG_UKSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_UKSource <=> cjkIRG_UKSource (string property)
    const char* _cjkIRG_UKSource;

    static consteval auto default_value_cjkIRG_USource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_USource <=> cjkIRG_USource (string property)
    const char* _cjkIRG_USource;

    static consteval auto default_value_cjkIRG_VSource(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkIRG_VSource <=> cjkIRG_VSource (string property)
    const char* _cjkIRG_VSource;

    static consteval auto default_value_cjkOtherNumeric(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return std::numeric_limits<double>::quiet_NaN();
      clt::unreachable("Invalid code point!");
    }
    // cjkOtherNumeric <=> cjkOtherNumeric (numeric property)
    double _cjkOtherNumeric;

    static consteval auto default_value_cjkPrimaryNumeric(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return std::numeric_limits<double>::quiet_NaN();
      clt::unreachable("Invalid code point!");
    }
    // cjkPrimaryNumeric <=> cjkPrimaryNumeric (numeric property)
    double _cjkPrimaryNumeric;

    static consteval auto default_value_cjkRSUnicode(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // cjkRSUnicode <=> cjkRSUnicode (string property)
    const char* _cjkRSUnicode;

    static consteval auto default_value_kEH_Cat(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // kEH_Cat <=> kEH_Cat (string property)
    const char* _kEH_Cat;

    static consteval auto default_value_kEH_Desc(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // kEH_Desc <=> kEH_Desc (string property)
    const char* _kEH_Desc;

    static consteval auto default_value_kEH_HG(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // kEH_HG <=> kEH_HG (string property)
    const char* _kEH_HG;

    static consteval auto default_value_kEH_IFAO(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // kEH_IFAO <=> kEH_IFAO (string property)
    const char* _kEH_IFAO;

    static consteval auto default_value_kEH_JSesh(uint32_t cp) noexcept {
      if (cp <= 0x10FFFF)
        return nullptr;
      clt::unreachable("Invalid code point!");
    }
    // kEH_JSesh <=> kEH_JSesh (string property)
    const char* _kEH_JSesh;
    // kEH_NoMirror <=> kEH_NoMirror (binary property)
    kEH_NoMirror _kEH_NoMirror;
    // kEH_NoRotate <=> kEH_NoRotate (binary property)
    kEH_NoRotate _kEH_NoRotate;
  }; // struct CodePointProperties
} // namespace clt::uni

#endif // !__COLT_UNICODE_PROPVALUES__

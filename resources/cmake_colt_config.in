#ifndef COLT_CONFIG
#define COLT_CONFIG

#if ${IMPL_COLT_IS_BIG_ENDIAN}
  /// @brief If defined, the target architecture is big endian
  #define COLT_BIG_ENDIAN
#else
  /// @brief If defined, the target architecture is little endian
  #define COLT_LITTLE_ENDIAN
#endif

#if defined(__ARM_NEON__) || (defined(COLT_MSVC) && defined(__ARM_ARCH))
  #include <arm_neon.h>
#endif

/// @brief Major version of Colt
#define COLT_VERSION_MAJOR 		${PROJECT_VERSION_MAJOR}
/// @brief Minor version of Colt
#define COLT_VERSION_MINOR 		${PROJECT_VERSION_MINOR}
/// @brief Patch version of Colt
#define COLT_VERSION_PATCH 		${PROJECT_VERSION_PATCH}
/// @brief Tweak version of Colt
#define COLT_VERSION_TWEAK 		${PROJECT_VERSION_TWEAK}
/// @brief The project version as a string
#define COLT_VERSION_STRING 	"${PROJECT_VERSION}"

#define COLT_OS_STRING			"${IMPL_COLT_OS_STRING}"

#ifdef COLT_DEBUG_BUILD
	#define COLT_CONFIG_STRING		"Debug"
#else
	#define COLT_CONFIG_STRING		"Release"
#endif

//Determine the current operating system
#if ${IMPL_COLT_OS_WINDOWS} == 1
	#define COLT_WINDOWS
#elif ${IMPL_COLT_OS_APPLE} == 1
	#define COLT_APPLE
#elif ${IMPL_COLT_OS_LINUX} == 1
	#define COLT_LINUX
#else
	#error "Unsupported platform!"
#endif

//Determine the current compiler
#if ${IMPL_COLT_CLANG} == 1
	#define COLT_CLANG
#elif ${IMPL_COLT_GNU} == 1
	#define COLT_GNU
#elif ${IMPL_COLT_INTEL} == 1
	#define COLT_INTEL
#elif ${IMPL_COLT_MSVC} == 1
	#define COLT_MSVC
#endif

#if defined(COLT_MSVC) && defined(COLT_DEBUG)
  //FOR MEMORY LEAK DETECTION
  #define _CRTDBG_MAP_ALLOC
  #include <stdlib.h>
  #include <crtdbg.h>
#endif

#if defined(__x86_64__) || defined(_M_X64)
  #define COLT_x86_64
  #define COLT_ARCH_STRING "x86_64"
  #include <immintrin.h>
#elif defined(i386) || defined(__i386__) || defined(__i386) || defined(_M_IX86)
  #define COLT_x86_32
  #define COLT_ARCH_STRING "x86_32"
#elif defined(__ARM_ARCH_2__)
  #define COLT_ARM2
  #define COLT_ARCH_STRING "ARM2"
#elif defined(__ARM_ARCH_3__) || defined(__ARM_ARCH_3M__)
  #define COLT_ARM3;
  #define COLT_ARCH_STRING "ARM3"
#elif defined(__ARM_ARCH_4T__) || defined(__TARGET_ARM_4T)
  #define COLT_ARM4T
  #define COLT_ARCH_STRING "ARM4T"
#elif defined(__ARM_ARCH_5_) || defined(__ARM_ARCH_5E_)
  #define COLT_ARM5
  #define COLT_ARCH_STRING "ARM5"
#elif defined(__ARM_ARCH_6T2_) || defined(__ARM_ARCH_6T2_)
  #define COLT_ARM6T2;
  #define COLT_ARCH_STRING "ARM6T2"
#elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__)
  #define COLT_ARM6
  #define COLT_ARCH_STRING "ARM6"
#elif defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
  #define COLT_ARM7
  #define COLT_ARM_7or8
  #define COLT_ARCH_STRING "ARM7"
#elif defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
  #define COLT_ARM7A
  #define COLT_ARM_7or8
  #define COLT_ARCH_STRING "ARM7A"
#elif defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
  #define COLT_ARM7R
  #define COLT_ARM_7or8
  #define COLT_ARCH_STRING "ARM7R"
#elif defined(__ARM_ARCH_7M__)
  #define COLT_ARM7M
  #define COLT_ARM_7or8
  #define COLT_ARCH_STRING "ARM7M"
#elif defined(__ARM_ARCH_7S__)
  #define COLT_ARM7S
  #define COLT_ARM_7or8
  #define COLT_ARCH_STRING "ARM7S"
#elif defined(__aarch64__) || defined(_M_ARM64)
  #define COLT_ARM64;
  #define COLT_ARM_7or8
  #define COLT_ARCH_STRING "ARM64"
#elif defined(mips) || defined(__mips__) || defined(__mips)
  #define COLT_MIPS
  #define COLT_ARCH_STRING "MIPS"
#elif defined(__sh__)
  #define COLT_SUPERH
  #define COLT_ARCH_STRING "SUPERH"
#elif defined(__powerpc) || defined(__powerpc__) || defined(__powerpc64__) || defined(__POWERPC__) || defined(__ppc__) || defined(__PPC__) || defined(_ARCH_PPC)
  #define COLT_POWERPC
  #define COLT_ARCH_STRING "PowerPC"
#elif defined(__PPC64__) || defined(__ppc64__) || defined(_ARCH_PPC64)
  #define COLT_POWERPC64
  #define COLT_ARCH_STRING "PowerPC64"
#elif defined(__sparc__) || defined(__sparc)
  #define COLT_SPARC
  #define COLT_ARCH_STRING "Sparc"
#elif (defined(__riscv) || defined(__riscv__)) // RISC-V
  #if __riscv_xlen == 32
    #define COLT_RV32
    #define COLT_ARCH_STRING "RV32"
  #elif __riscv_xlen == 64
    #define COLT_RV64
    #define COLT_ARCH_STRING "RV64"
  #endif //  (__riscv_xlen == 32)
#elif defined(__m68k__)
  #define COLT_M68K
  #define COLT_ARCH_STRING "M68K"
#else
  #define COLT_ARCH_STRING "Unknown"
#endif

namespace clt
{
#ifdef COLT_DEBUG
  /// @brief Check if the current build is on DEBUG configuration
  /// @return True if on DEBUG
  [[nodiscard]]
  consteval bool is_debug_build() noexcept { return true; }
#else
  /// @brief Check if the current build is on DEBUG configuration
  /// @return True if on DEBUG
  [[nodiscard]]
  consteval bool is_debug_build() noexcept { return false; }
#endif // COLT_DEBUG

  /// @brief Check if the current build is on RELEASE configuration
  /// @return True if on RELEASE (not on DEBUG)
  [[nodiscard]]
  consteval bool is_release_build() noexcept { return !is_debug_build(); }

  enum class TargetOS
    : unsigned char
  {
    os_windows, os_linux, os_apple,
    native =
#ifdef COLT_WINDOWS
    os_windows
#elif defined(COLT_APPLE)
    os_apple
#elif defined(COLT_LINUX)
    os_linux
#else
    (unsigned char)-1
  #error "Unsupported platform!"
#endif
  };  
}

#endif //COLT_CONFIG